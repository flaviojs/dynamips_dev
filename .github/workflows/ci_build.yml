name: CI build

on:
  workflow_dispatch: # run manually https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow
  push:
    branches: [ "master", "dev" ] # run for these branches
  pull_request:
    branches: [ "master" ] # run for pull requests that target these branches

env:
  BUILD_TYPE: RelWithDebInfo # CMake build type (Release, Debug, RelWithDebInfo, etc.)

jobs:
  # ----------------------------------------------------------------------------------------------
  linux-amd64:
    name: Linux (amd64/x86_64)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies with APT (libelf, libpcap)
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: >
          build-essentials
          cargo
          cmake
          git
          libelf-dev
          libpcap0.8-dev 
          rust-all
        version: linux-amd64

    - name: Install dependencies with cargo
      run: |
        set -x
        # needs cbindgen 0.27+
        cargo install cbindgen

    - name: Log versions
      run: |
        set -x
        cargo --version
        cargo-clippy --version
        cbindgen --version
        cmake --version
        gcc --version
        rustc --version
        rustfmt --version
        cargo tree

    - name: Configure with CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDYNAMIPS_CODE=both -DBUILD_UDP_RECV=ON -DBUILD_UDP_SEND=ON -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install -DCPACK_PACKAGE_FILE_NAME=dynamips-package -DCPACK_GENERATOR=ZIP

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      run: |
        set -x
        cd ${{github.workspace}}/build
        ctest --verbose --build-config ${{env.BUILD_TYPE}}
        ./stable/dynamips -e
        ./unstable/dynamips_amd64_unstable -e

    - name: Install
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Package
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Upload success
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64-success
        path: |
          ${{github.workspace}}/build/install/
          ${{github.workspace}}/build/dynamips-package.zip
        compression-level: 9 # maximum compression

    - name: Upload failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64-failure
        path: ${{github.workspace}}/build/
        compression-level: 9 # maximum compression

  # ----------------------------------------------------------------------------------------------
  linux-x86:
    name: Linux (x86)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup x86 chroot with Alpine Linux and install dependencies
      uses: jirutka/setup-alpine@v1
      with:
        arch: x86
        packages: >
          build-base
          cargo
          cmake
          elfutils-dev
          git
          libpcap-dev
          linux-headers
          rust
          rust-clippy
          rustfmt

    - name: Install dependencies with cargo
      shell: alpine.sh {0}
      run: |
        set -x
        # needs cbindgen 0.27+
        cargo install cbindgen

    - name: Log versions
      shell: alpine.sh {0}
      run: |
        set -x
        cargo --version
        cargo-clippy --version
        cbindgen --version
        cmake --version
        gcc --version
        rustc --version
        rustfmt --version
        cargo tree

    - name: Configure with CMake
      shell: alpine.sh {0}
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDYNAMIPS_CODE=both -DBUILD_UDP_RECV=ON -DBUILD_UDP_SEND=ON -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install -DCPACK_PACKAGE_FILE_NAME=dynamips-package -DCPACK_GENERATOR=ZIP

    - name: Build
      shell: alpine.sh {0}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      shell: alpine.sh {0}
      run: |
        set -x
        cd ${{github.workspace}}/build
        ctest --verbose --build-config ${{env.BUILD_TYPE}}
        ./stable/dynamips -e
        ./unstable/dynamips_x86_unstable -e

    - name: Install
      shell: alpine.sh {0}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Package
      shell: alpine.sh {0}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Upload success
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: linux-x86-success
        path: |
          ${{github.workspace}}/build/install/
          ${{github.workspace}}/build/dynamips-package.zip
        compression-level: 9 # maximum compression

    - name: Upload failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: linux-x86-failure
        path: ${{github.workspace}}/build/
        compression-level: 9 # maximum compression

  # ----------------------------------------------------------------------------------------------
  macos-amd64:
    name: MacOS (amd64/x86_64)
    runs-on: macos-13 # macos-13 is the last runner with an AMD64 cpu, macos-14 has an ARM cpu (Apple M1)
    steps:
    - uses: actions/checkout@v4

    # XXX libpcap is included in the SDK
    - name: Install dependencies with brew
      uses: ConorMacBride/install-package@v1
      with:
        brew: libelf rustup

    - name: Install dependencies (rust)
      run: |
        set -x
        rustup install stable
        rustup component add clippy rustfmt
        # needs cbindgen 0.27+
        cargo install cbindgen

    - name: Log versions
      run: |
        set -x
        cargo --version
        cargo-clippy --version
        cbindgen --version
        cmake --version
        gcc --version
        rustc --version
        rustfmt --version
        cargo tree

    - name: Configure with CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDYNAMIPS_CODE=both -DBUILD_UDP_RECV=ON -DBUILD_UDP_SEND=ON -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install -DCPACK_PACKAGE_FILE_NAME=dynamips-package -DCPACK_GENERATOR=ZIP

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      run: |
        set -x
        cd ${{github.workspace}}/build
        ctest --verbose --build-config ${{env.BUILD_TYPE}}
        ./stable/dynamips -e
        ./unstable/dynamips_amd64_unstable -e

    - name: Install
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Package
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Upload success
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: macos-amd64-success
        path: |
          ${{github.workspace}}/build/install/
          ${{github.workspace}}/build/dynamips-package.zip
        compression-level: 9 # maximum compression

    - name: Upload failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: macos-amd64-failure
        path: ${{github.workspace}}/build/
        compression-level: 9 # maximum compression

  # ----------------------------------------------------------------------------------------------
  cygwin-amd64:
    # FIXME rust needs a target/toolchain that understands cygwin paths, no cygwin for now
    #       An attempt: https://github.com/ookiineko-cygport
    if: false
    name: Cygwin (amd64/x86_64)
    runs-on: windows-latest
    env:
      CYGWIN_NOWINPATH: 1 # isolate cygwin from windows
    defaults:
      run:
        shell: C:\cygwin\bin\bash.EXE --login -e -o pipefail -o igncr '{0}'
    steps:
    - name: Avoid '\r' problems
      shell: cmd
      run: git config --global core.autocrlf input

    - uses: actions/checkout@v4

    # FIXME using the libelf-devel package gets you a "missing libintl_dgettext" error, how to fix?
    - name: Install dependencies with Cygwin
      uses: cygwin/cygwin-install-action@master
      with:
        packages: git curl p7zip cmake make gcc-core
        platform: x86_64
        add-to-path: false

    - name: Adapt cygwin environment
      run: |
        set -x
        # avoid git error "detected dubious ownership"
        git config --global --add safe.directory '*'
        # set the start directory
        echo "cd '${{github.workspace}}'" >> ~/.bash_profile
        # make windows rust stuff available to cygwin
        ln -s $(cygpath "${USERPROFILE}")/.cargo .cargo
        echo "export PATH=\$PATH:$(pwd)/.cargo/bin" >> ~/.bash_profile

    - name: Install dependencies (rust)
      run: |
        set -x
        rustup default stable-x86_64-pc-windows-gnu # FIXME needs a target/toolchain that understands cygwin paths
        rustup install stable
        rustup component add clippy rustfmt

    - name: Install dependencies (libelf)
      run: |
        set -x
        curl -O https://fossies.org/linux/misc/old/libelf-0.8.13.tar.gz
        tar xvzf libelf-0.8.13.tar.gz
        cd libelf-0.8.13
        ./configure --host x86_64-pc-cygwin
        make
        make install

    - name: Install dependencies (winpcap SDK)
      run: |
        set -x
        curl -O https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip
        7za x ./WpdPack_4_1_2.zip -o.
        cp ./WpdPack/Lib/x64/Packet.lib /usr/local/lib/libpacket.a
        cp ./WpdPack/Lib/x64/wpcap.lib /usr/local/lib/libwpcap.a
        cp --verbose --force --recursive ./WpdPack/Include/* /usr/local/include/

    - name: Install dependencies (win10pcap)
      shell: cmd
      run: |
        echo on
        curl -O "http://www.win10pcap.org/download/Win10Pcap-v10.2-5002.msi"
        msiexec /i "Win10Pcap-v10.2-5002.msi" /qn /norestart /L*v "Win10Pcap-install.log"
        type "Win10Pcap-install.log"

    - name: Configure with CMake
      run: cmake -B $(pwd)/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDYNAMIPS_CODE=both -DBUILD_UDP_RECV=ON -DBUILD_UDP_SEND=ON -DCMAKE_INSTALL_PREFIX=$(pwd)/build/install -DCPACK_PACKAGE_FILE_NAME=dynamips-package -DCPACK_GENERATOR=ZIP

    - name: Build
      run: cmake --build $(pwd)/build --config ${{env.BUILD_TYPE}}

    - name: Test
      run: |
        set -x
        cd build
        ctest --verbose --build-config ${{env.BUILD_TYPE}}
        ./stable/dynamips -e
        ./unstable/dynamips_amd64_unstable -e

    - name: Install
      run: cmake --build $(pwd)/build --config ${{env.BUILD_TYPE}} --target install

    - name: Package
      run: cmake --build $(pwd)/build --config ${{env.BUILD_TYPE}} --target package

    - name: Upload success
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: cygwin-amd64-success
        path: |
          ${{github.workspace}}/build/install/
          ${{github.workspace}}/build/dynamips-package.zip
        compression-level: 9 # maximum compression

    - name: Upload failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: cygwin-amd64-failure
        path: ${{github.workspace}}/build/
        compression-level: 9 # maximum compression

  # ----------------------------------------------------------------------------------------------
  linux-ppc32:
    name: Linux (ppc32)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Restore ArchPOWER powerpc iso
      uses: actions/cache/restore@v4
      with:
        path: |
          archpower-current-powerpc.iso
          archpower-current-powerpc.iso.sig
        key: archpower-current-powerpc-iso

    - name: Get updated ArchPOWER powerpc iso
      id: get-updated-iso
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        set -x
        _cache_iso=yes

        ## Remember cached iso
        if [ -f archpower-current-powerpc.iso ]; then
          sha1sum archpower-current-powerpc.iso* >cached.sha1
          cat cached.sha1
        fi

        ## Get updated iso
        wget --progress=dot:giga --timestamping https://archlinuxpower.org/iso/archpower-current-powerpc.iso
        wget --progress=dot:giga --timestamping https://archlinuxpower.org/iso/archpower-current-powerpc.iso.sig
        gpg --keyserver hkps://keyserver.ubuntu.com --keyserver-options auto-key-retrieve --verify archpower-current-powerpc.iso.sig

        ## Invalidate cached iso
        if [ -f cached.sha1 ]; then
          sha1sum archpower-current-powerpc.iso* >updated.sha1
          cat updated.sha1
          if cmp -s cached.sha1 updated.sha1; then
            # Nothing changed, keep cache
            _cache_iso=no
          else
            # Files changed, invalidate cache
            gh cache delete archpower-current-powerpc-iso
          fi
          rm cached.sha1 updated.sha1
        fi
        echo "cache-iso=${_cache_iso}" >> $GITHUB_OUTPUT

    - name: Cache ArchPOWER powerpc iso
      if: ${{ steps.get-updated-iso.outputs.cache-iso }} == 'yes'
      uses: actions/cache/save@v4
      with:
        path: |
          archpower-current-powerpc.iso
          archpower-current-powerpc.iso.sig
        key: archpower-current-powerpc-iso

    - name: Create chroot
      run: |
        set -x

        ## Make sure the system can run ppc32 executables (persistent) and that sudo works (credential)
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset --persistent yes --credential yes

        ## Create overlay
        mkdir -p overlay/iso overlay/sfs overlay/rw overlay/root overlay/work
        sudo mount --read-only archpower-current-powerpc.iso overlay/iso/
        sudo mount --read-only overlay/iso/arch/ppc/airootfs.sfs overlay/sfs/
        sudo mount -t overlay -o lowerdir=overlay/sfs,upperdir=overlay/rw,workdir=overlay/work none overlay/root/
        sudo chown root:root overlay/root
        sudo mkdir overlay/root/home/$USER
        sudo mount --rbind /home/$USER overlay/root/home/$USER/
        # based on https://wiki.archlinux.org/title/Chroot#Using_chroot
        sudo mount -t proc /proc overlay/root/proc/
        sudo mount -t sysfs /sys overlay/root/sys/
        sudo mount --rbind /dev overlay/root/dev/
        sudo rm overlay/root/etc/resolv.conf
        sudo cp /etc/resolv.conf overlay/root/etc/resolv.conf
        cat overlay/root/etc/os-release

        ## Create chroot script
        wget https://github.com/jirutka/setup-alpine/raw/refs/heads/master/alpine.sh
        cat alpine.sh
        sudo install -Dvm755 alpine.sh overlay/root/script/archpower.sh
        rm alpine.sh
        echo "$PWD/overlay/root/script" >> "$GITHUB_PATH"

        ## Prepare chroot
        sudo chroot $PWD/overlay/root pacman-key --init
        sudo chroot $PWD/overlay/root pacman-key --populate
        sudo chroot $PWD/overlay/root pacman -Sy --noprogressbar --noconfirm --needed sudo
        sudo chroot $PWD/overlay/root bash -c "echo '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers"
        sudo chroot $PWD/overlay/root useradd -u $(id -u $USER) -G wheel $USER

    - name: Install dependencies
      shell: archpower.sh {0}
      run: |
        set -x

        ## Remove ubuntu stuff
        rm -rf $HOME/.cargo $HOME/.rustup

        ## Add ArchPOWER stuff
        sudo pacman -S --noprogressbar --noconfirm --needed base-devel git cmake zip libelf libpcap rustup cbindgen
        rustup install stable
        rustup component add clippy rustfmt

    - name: Log versions
      shell: archpower.sh {0}
      run: |
        set -x
        cargo --version
        cargo-clippy --version
        cbindgen --version
        cmake --version
        gcc --version
        rustc --version
        rustfmt --version
        cargo tree

    - name: Configure with CMake
      shell: archpower.sh {0}
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDYNAMIPS_CODE=both -DBUILD_UDP_RECV=ON -DBUILD_UDP_SEND=ON -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install -DCPACK_PACKAGE_FILE_NAME=dynamips-package -DCPACK_GENERATOR=ZIP

    - name: Build
      shell: archpower.sh {0}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      shell: archpower.sh {0}
      run: |
        set -x
        cd ${{github.workspace}}/build
        ctest --verbose --build-config ${{env.BUILD_TYPE}}
        ./stable/dynamips -e
        ./unstable/dynamips_ppc32_unstable -e

    - name: Install
      shell: archpower.sh {0}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Package
      shell: archpower.sh {0}
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Upload success
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: linux-ppc32-success
        path: |
          ${{github.workspace}}/build/install/
          ${{github.workspace}}/build/dynamips-package.zip
        compression-level: 9 # maximum compression

    - name: Upload failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: linux-ppc32-failure
        path: ${{github.workspace}}/build/
        compression-level: 9 # maximum compression
