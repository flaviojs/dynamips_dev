language = "C"
include_version = true
include_guard = "DYNAMIPS_C_CBINDGEN_H"
pragma_once = true
documentation_style = "c++"
style = "tag"
sys_includes = [
    "errno.h",
    "stdio.h",
    "string.h",
    "sys/socket.h",
    "sys/time.h",
    "time.h",
    "unistd.h",
]
after_includes = """
// BEGIN after_includes

#if HAS_RFC2553
#define ENABLE_IPV6
#endif

#ifdef DYNAMIPS_ARCH_amd64
#define JIT_ARCH "amd64"
#define JIT_CPU CPU_amd64
#define MIPS64_ARCH_INC_FILE "mips64_amd64_trans.h"
#define PPC32_ARCH_INC_FILE "ppc32_amd64_trans.h"
#endif

#ifdef DYNAMIPS_ARCH_nojit
#define JIT_ARCH "nojit"
#define JIT_CPU CPU_nojit
#define MIPS64_ARCH_INC_FILE "mips64_nojit_trans.h"
#define PPC32_ARCH_INC_FILE "ppc32_nojit_trans.h"
#endif

#ifdef DYNAMIPS_ARCH_ppc32
#define JIT_ARCH "ppc32"
#define JIT_CPU CPU_ppc32
#define MIPS64_ARCH_INC_FILE "mips64_ppc32_trans.h"
#define PPC32_ARCH_INC_FILE "ppc32_ppc32_trans.h"
#endif

#ifdef DYNAMIPS_ARCH_x86
#define JIT_ARCH "x86"
#define JIT_CPU CPU_x86
#define MIPS64_ARCH_INC_FILE "mips64_x86_trans.h"
#define PPC32_ARCH_INC_FILE "ppc32_x86_trans.h"
#endif

/* By default, Cygwin supports only 64 FDs with select()! */
#if defined(__CYGWIN__) && !defined(FD_SETSIZE)
#define FD_SETSIZE 1024
#endif

/* Endianness */
#if defined(PPC) || defined(__powerpc__) || defined(__ppc__)
#define ARCH_BYTE_ORDER ARCH_BIG_ENDIAN
#elif defined(__sparc) || defined(__sparc__)
#define ARCH_BYTE_ORDER ARCH_BIG_ENDIAN
#elif defined(__alpha) || defined(__alpha__)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__i386) || defined(__i386__) || defined(i386)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__x86_64__)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__ia64__)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__arm__) || defined (__aarch64__)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__ppc64__)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__s390x__)
#define ARCH_BYTE_ORDER ARCH_BIG_ENDIAN
#elif defined(__riscv) || defined(__riscv__)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#elif defined(__loongarch64)
#define ARCH_BYTE_ORDER ARCH_LITTLE_ENDIAN
#endif

#ifndef ARCH_BYTE_ORDER
#error Please define your architecture!
#endif

#ifndef _Unused
/* Function that is never used */
#define _Unused  __attribute__((unused))
#endif

#ifndef _maybe_used
/* Function that is referenced from excluded code (commented out or depends on preprocessor) */
#define _maybe_used  __attribute__((unused))
#endif

#ifndef UNUSED
/* Variable that is never used (name is changed to get an error on use) */
#define UNUSED(x)  UNUSED_ ## x __attribute__((unused))
#endif

#if __GNUC__ > 2
#define forced_inline inline __attribute__((always_inline))
#define no_inline __attribute__ ((noinline))
#else
#define forced_inline inline
#define no_inline
#endif

#if __GNUC__ > 2
/* http://kerneltrap.org/node/4705 */
#define likely(x)    __builtin_expect(!!(x),1)
#define unlikely(x)  __builtin_expect((x),0)
#else
#define likely(x)    (x)
#define unlikely(x)  (x)
#endif

#ifndef _not_aligned
#define _not_aligned __attribute__ ((aligned (1)))
#endif

/* Max and min macro */
#define m_max(a,b) (((a) > (b)) ? (a) : (b))
#define m_min(a,b) (((a) < (b)) ? (a) : (b))

/* A simple macro for adjusting pointers */
#define PTR_ADJUST(type,ptr,size) (type)((char *)(ptr) + (size))

/* Size of a field in a structure */
#define SIZEOF(st,field) (sizeof(((st *)NULL)->field))

/* Compute offset of a field in a structure */
#define OFFSET(st,f)     ((long)&((st *)(NULL))->f)

/* Stringify a constant */
#define XSTRINGIFY(val)  #val
#define STRINGIFY(val)   XSTRINGIFY(val)

/* MMAP */
#ifndef MAP_ANONYMOUS
#define MAP_ANONYMOUS MAP_ANON
#endif

#ifdef USE_UNSTABLE
/* Macros for double linked list */
#define M_LIST_ADD(item,head,prefix) \
   do { \
      (item)->prefix##_next  = (head); \
      (item)->prefix##_pprev = &(head); \
      \
      if ((head) != NULL) \
         (head)->prefix##_pprev = &(item)->prefix##_next; \
      \
      (head) = (item); \
   }while(0)

#define M_LIST_REMOVE(item,prefix) \
   do { \
      if ((item)->prefix##_pprev != NULL) { \
         if ((item)->prefix##_next != NULL) \
            (item)->prefix##_next->prefix##_pprev = (item)->prefix##_pprev; \
         \
         *((item)->prefix##_pprev) = (item)->prefix##_next; \
         \
         (item)->prefix##_pprev = NULL; \
         (item)->prefix##_next  = NULL; \
      } \
   }while(0)
#endif

char *dyn_sprintf(const char *fmt,...);
void m_flog(FILE *fd,char *module,char *fmt,va_list ap);
void m_log(char *module,char *fmt,...);
ssize_t fd_printf(int fd,int flags,char *fmt,...);

// FIXME cbindgen limitation: struct comes before the typedef, so a forward declaration is needed to use the typedef inside the struct
typedef struct insn_exec_page insn_exec_page_t;
typedef struct m_list m_list_t;

// for layout.aligned_n
#define CBINDGEN_LAYOUT_ALIGNED_N(n) __attribute__ ((aligned(n)))

// for layout.packed
#define CBINDGEN_LAYOUT_PACKED __attribute__ ((__packed__))

// END after_includes
"""

[defines]
"feature = DYNAMIPS_ARCH_amd64" = "DYNAMIPS_ARCH_amd64" # can recompile opcodes to native assembly code (amd64/x86_64)
"feature = DYNAMIPS_ARCH_nojit" = "DYNAMIPS_ARCH_nojit" # cannot recompile opcodes
"feature = DYNAMIPS_ARCH_ppc32" = "DYNAMIPS_ARCH_ppc32" # can recompile opcodes to native assembly code (ppc32)
"feature = DYNAMIPS_ARCH_x86" = "DYNAMIPS_ARCH_x86" # can recompile opcodes to native assembly code (x86)
"feature = ENABLE_IPV6" = "ENABLE_IPV6" # ipv6
"feature = USE_UNSTABLE" = "USE_UNSTABLE" # replace stable code with unstable code

[layout]
aligned_n = "CBINDGEN_LAYOUT_ALIGNED_N"
packed = "CBINDGEN_LAYOUT_PACKED"
